<?php
/*\
|*|
|*|  ACCOUNTS MANAGER
|*|    (Addon for Oli Framework)
|*|
|*|  Easy way to Manage Accounts
|*|  Tools to speed up your website
|*|
|*|  Created: July 2015
|*|  Developper: Matiboux (http://twitter.com/Matiboux)
|*|
\*/

/*\
|*|
|*|  WARNING:
|*|
|*|  This extension needs PHP 5.5+
|*|  Or the PHP "Password" Extension (for PHP 5.3.7+)
|*|
\*/

/*\
|*|
|*|  NEXT UPDATE:
|*|
|*|  * Extend MySQL Management for ~$accountsTable
|*|  * New MySQL Management for:
|*|    * Additionals accounts infos (~$infosTable)
|*|    * Accounts ranks and rights (~$rightsTable)
|*|    * Register pending request (active/valid accounts) infos (~$requestsTable)
|*|      * /!\ Can be configured. (off, before first connection, before register, ...)
|*|  * Add case sensitive parameters to get infos functions 
|*|
\*/

namespace AccountsManager {

use \PDO; // Use PDO class

class AccountsManager {
	/** Externals Class */
	private $_Oli;
	private $db = null;
	
	private $accountsTable = '';
	private $infosTable = '';
	private $rightsTable = '';
	private $sessionsTable = '';
	private $requestsTable = '';
	
	private $hashAlgorithm = PASSWORD_DEFAULT;
	private $hashSalt = null;
	private $hashCost = null;
	
	private $authKeyCookieName = '';
	private $authKeyCookie_domain = '';
	private $authKeyCookie_secure = '';
	private $authKeyCookie_httpOnly = '';
	
	private $defaultUserRight = 'USER';
	private $registerVerificationMethod = 'USER';
	
	
	/** ------- */
	/**  SETUP  */
	/** ------- */
	
	/** Construct */
	public function __construct() {
		global $_Oli;
		if(empty($_Oli))
			trigger_error('L\'objet du Framework Oli ($_Oli) n\'est pas défini', E_USER_ERROR);
		
		$this->_Oli = &$_Oli;
	}
	
	/** *** *** */
	
	/** ----------- */
	/**  MySQL PDO  */
	/** ----------- */
	
	/** MySQL Config */
	public function setupExistMySQL() {
		if(empty($this->_Oli->db))
			trigger_error('L\'objet de connexion MySQL PDO n\'est pas défini dans le Framework Oli', E_USER_ERROR);
		
		$this->db = &$this->_Oli->db;
		return true;
	}
	public function setupManualMySQL($database, $username = 'root', $password = '', $host = 'localhost') {
		try {
			$this->db = new PDO('mysql:host=' . $host . ';dbname=' . $database . ';charset=utf8', $username, $password);
		}
		catch(Exception $e) {
			trigger_error($e->getMessage(), E_USER_ERROR);
		}
	}
	
	/** ---------------------- */
	/**  Tables Configuration  */
	/** ---------------------- */
	
	/** Tables Config */
	public function setAccountsTable($table) {
		$this->accountsTable = $table;
	}
	public function setInfosTable($table) {
		$this->infosTable = $table;
	}
	public function setRightsTable($table) {
		$this->rightsTable = $table;
	}
	public function setSessionsTable($table) {
		$this->sessionsTable = $table;
	}
	public function setRequestsTable($table) {
		$this->requestsTable = $table;
	}
	
	/** -------------------- */
	/**  Hash Configuration  */
	/** -------------------- */
	
	/** Hash Salt Config */
	public function setHashAlgorithm($salt) {
		$this->hashAlgorithm = $salt;
	}
	public function setHashSalt($salt) {
		$this->hashSalt = $salt;
	}
	public function setHashCost($salt) {
		$this->hashCost = $salt;
	}
	
	/** --------------------------- */
	/**  Auth Cookie Configuration  */
	/** --------------------------- */
	
	/** Auth Key Cookie - Name */
	public function setAuthKeyCookieName($name) {
		$this->authKeyCookieName = $name;
	}
	/** Auth Key Cookie - Domain */
	public function setAuthKeyCookieDomain($domain) {
		$this->authKeyCookie_domain = $domain;
	}
	/** Auth Key Cookie - Secure */
	public function setAuthKeyCookieSecure($secure) {
		$this->authKeyCookie_secure = $secure;
	}
	/** Auth Key Cookie - Http Only */
	public function setAuthKeyCookieHttpOnly($httponly) {
		$this->authKeyCookie_httpOnly = $httponly;
	}
	
	/** ------------------------------ */
	/**  Login/Register Configuration  */
	/** ------------------------------ */
	
	/** Set Register Method ( */
	public function setRegisterVerification($activate) {
		if($activate) {
			$this->registerVerification = true;
			$this->defaultUserRight = 'NEW-USER';
		}
		else {
			$this->registerVerification = false;
			$this->defaultUserRight = 'USER';
		}
		return true;
	}
	
	/** *** *** */
	
	/** ----------- */
	/**  Get Infos  */
	/** ----------- */
	
	/*\
	|*|
	|*|  ALLOWED TABLES CODE:
	|*|  * ACCOUNTS - User Accounts List
	|*|  * INFOS - User Accounts Additional Infos
	|*|  * RIGHTS - User Rights List
	|*|  * SESSIONS - User Accounts Sessions (login)
	|*|  * REQUESTS - User New Accounts Requests (register)
	|*|
	\*/
	
	/** Get Lines from Accounts Table */
	public function getAccountLines($tableCode, $where = [], $caseSensitive = true) {
		if($tableCode == 'ACCOUNTS')
			return $this->_Oli->getLinesMySQL($this->accountsTable, $where, $caseSensitive);
		else if($tableCode == 'INFOS')
			return $this->_Oli->getLinesMySQL($this->infosTable, $where, $caseSensitive);
		else if($tableCode == 'SESSIONS')
			return $this->_Oli->getLinesMySQL($this->sessionsTable, $where, $caseSensitive);
		else if($tableCode == 'REQUESTS')
			return $this->_Oli->getLinesMySQL($this->requestsTable, $where, $caseSensitive);
		else 
			return false;
	}
	
	/** Get Infos from Accounts Table */
	public function getAccountInfos($tableCode, $whatVar, $where = [], $caseSensitive = true) {
		if($tableCode == 'ACCOUNTS')
			return $this->_Oli->getInfosMySQL($this->accountsTable, $whatVar, $where, $caseSensitive);
		else if($tableCode == 'INFOS')
			return $this->_Oli->getInfosMySQL($this->infosTable, $whatVar, $where, $caseSensitive);
		else if($tableCode == 'SESSIONS')
			return $this->_Oli->getInfosMySQL($this->sessionsTable, $whatVar, $where, $caseSensitive);
		else if($tableCode == 'REQUESTS')
			return $this->_Oli->getInfosMySQL($this->requestsTable, $whatVar, $where, $caseSensitive);
		else 
			return false;
	}
	
	/** Is Exist Infos from Accounts Table */
	public function isExistAccountInfos($tableCode, $what, $caseSensitive = true) {
		if($tableCode == 'ACCOUNTS')
			return $this->_Oli->isExistInfosMySQL($this->accountsTable, $what, $caseSensitive);
		else if($tableCode == 'INFOS')
			return $this->_Oli->isExistInfosMySQL($this->infosTable, $what, $caseSensitive);
		else if($tableCode == 'SESSIONS')
			return $this->_Oli->isExistInfosMySQL($this->sessionsTable, $what, $caseSensitive);
		else if($tableCode == 'REQUESTS')
			return $this->_Oli->isExistInfosMySQL($this->requestsTable, $what, $caseSensitive);
		else 
			return false;
	}
	
	/** ----------------- */
	/**  Auth Key Cookie  */
	/** ----------------- */
	
	/** Set Auth Key Cookie */
	public function setAuthKeyCookie($authKey, $cookie_duration) {
		return setcookie($this->authKeyCookieName, $authKey, time() + $cookie_duration, '/', $this->authKeyCookie_domain, $this->authKeyCookie_secure, $this->authKeyCookie_httpOnly);
	}
	/** Delete Auth Key Cookie */
	public function deleteAuthKeyCookie() {
		return setcookie($this->authKeyCookieName, '', -1, '/', $this->authKeyCookie_domain, $this->authKeyCookie_secure, $this->authKeyCookie_httpOnly);
	}
	
	/** Get Auth Key Cookie Name */
	public function getAuthKeyCookieName() {
		return $this->authKeyCookieName;
	}
	/** Get Auth Key Cookie Value */
	public function getAuthKey() {
		return $_COOKIE[$this->authKeyCookieName];
	}
	
	/** Get Auth Key Owner */
	public function getAuthKeyOwner() {
		if($this->getAuthKey() != ''
		AND $this->isExistAccountInfos('SESSIONS', array('auth_key' => $this->getAuthKey())))
			return $this->getAccountInfos('SESSIONS', 'username', array('auth_key' => $this->getAuthKey()));
		else
			return false;
	}
	
	/** Verify Auth Key */
	public function verifyAuthKey() {
		if($this->getAuthKey() != ''
		AND $this->isExistAccountInfos('SESSIONS', array('auth_key' => $this->getAuthKey())))
			return true;
		else
			return false;
	}
	
	/** ---------------- */
	/**  Login Requests  */
	/** ---------------- */
	
	/** Verify Login */
	public function verifyLogin($username, $password) {
		if($this->isExistAccountInfos('ACCOUNTS', array('username' => $username), false))
			return password_verify($password, $this->getAccountInfos('ACCOUNTS', 'password', array('username' => $username), false));
		else
			return false;
	}
	
	/** Login (and Set Authentification Key Cookie) */
	public function loginAccount($username, $password, $cookie_duration) {
		if($this->verifyLogin($username, $password)) {
			$newAuthKey = $this->_Oli->keygen(100);
			if(empty($cookie_duration)
			AND $cookie_duration <= 0)
				$cookie_duration = 24*3600;
			
			$matches['id'] = $this->_Oli->getLastInfoMySQL($this->sessionsTable, 'id') + 1;
			$matches['username'] = $username;
			$matches['auth_key'] = $newAuthKey;
			$matches['user_ip'] = $this->_Oli->getUserIP();
			$matches['login_date'] = date('Y-m-d H:i:s');
			$matches['expire_date'] = date('Y-m-d H:i:s', time() + $cookie_duration);
			
			$this->_Oli->insertLinesMySQL($this->sessionsTable, $matches);
			$this->setAuthKeyCookie($newAuthKey, $cookie_duration);
			return $newAuthKey;
		}
		else
			return 'false';
	}
	
	/** Logout (and Delete Authentification Key Cookie) */
	public function logoutAccount() {
		$this->_Oli->deleteLineMySQL($this->sessionsTable, array('auth_key' => $this->getAuthKey()));
		$this->deleteAuthKeyCookie();
		return true;
	}
	
	/** ----------------- */
	/**  Manage Accounts  */
	/** ----------------- */
	
	/** Logout (and Delete Authentification Key Cookie) */
	public function getRegisterVerification() {
		return $this->registerVerification;
	}
	
	/** Register new Account */
	public function registerAccount($username, $password, $email) {
		if(!$this->isExistAccountInfos('ACCOUNTS', array('username' => $username), false)) {
			if($this->isExistAccountInfos('INFOS', array('username' => $username), false))
				$this->deleteAccountInfos('INFOS', array('username' => $username));
			if($this->isExistAccountInfos('SESSIONS', array('username' => $username), false))
				$this->deleteAccountInfos('SESSIONS', array('username' => $username));
			if($this->isExistAccountInfos('REQUESTS', array('username' => $username), false))
				$this->deleteAccountInfos('REQUESTS', array('username' => $username));
			
			$accountsMatches['id'] = $this->_Oli->getLastInfoMySQL($this->accountsTable, 'id') + 1;
			$accountsMatches['username'] = $username;
			$accountsMatches['password'] = $this->cryptPassword($password);
			$accountsMatches['email'] = $email;
			$accountsMatches['user_right'] = $this->defaultUserRight;
			$this->_Oli->insertLinesMySQL($this->accountsTable, $accountsMatches);
			
			$infosMatches['id'] = $this->_Oli->getLastInfoMySQL($this->infosTable, 'id') + 1;
			$infosMatches['username'] = $username;
			$this->_Oli->insertLinesMySQL($this->infosTable, $infosMatches);
		
			if($this->registerVerification) {
				$activateKey = $this->_Oli->keygen(6, false, true, true);
				$requestsMatches['id'] = $this->_Oli->getLastInfoMySQL($this->requestsTable, 'id') + 1;
				$requestsMatches['username'] = $username;
				$requestsMatches['activate_key'] = $activateKey;
				$requestsMatches['request_date'] = date('Y-m-d H:i:s');
				$this->_Oli->insertLinesMySQL($this->requestsTable, $requestsMatches);
				
				$subject = 'Activation de votre compte';
				$message = 'Votre nom d\'utilisateur est : ' . $activateKey . PHP_EOL;
				$message = 'Votre code d\'activation est : ' . $activateKey . PHP_EOL;
				$message .= 'Rendez-vous ici pour activer votre compte :' . PHP_EOL;
				$message .= '<a href="' . $this->_Oli->getInfosMySQL('settings_account', 'value', array('name' => 'url')) . 'activate/">' . $this->_Oli->getInfosMySQL('settings_account', 'value', array('name' => 'url')) . 'activate/</a>';
				$headers = 'From: contact@' . $this->_Oli->getOption('domain');
				
				mail($email, $subject, wordwrap($message, 70, PHP_EOL), $headers);
			}
			else {
				return true;
			}
		}
		else
			return false;
	}
	
	/** Update Account Infos */
	public function updateAccountInfos($tableCode, $what, $where) {
		if($tableCode == 'ACCOUNTS')
			return $this->_Oli->updateInfosMySQL($this->accountsTable, $what, $where);
		else if($tableCode == 'INFOS')
			return $this->_Oli->updateInfosMySQL($this->infosTable, $what, $where);
		else if($tableCode == 'SESSIONS')
			return $this->_Oli->updateInfosMySQL($this->sessionsTable, $what, $where);
		else if($tableCode == 'REQUESTS')
			return $this->_Oli->updateInfosMySQL($this->requestsTable, $what, $where);
		else 
			return false;
	}
	
	/** Update Account Infos */
	public function deleteAccountInfos($tableCode, $where) {
		if($tableCode == 'ACCOUNTS')
			return $this->_Oli->deleteLinesMySQL($this->accountsTable, $where);
		else if($tableCode == 'INFOS')
			return $this->_Oli->deleteLinesMySQL($this->infosTable, $where);
		else if($tableCode == 'SESSIONS')
			return $this->_Oli->deleteLinesMySQL($this->sessionsTable, $where);
		else if($tableCode == 'REQUESTS')
			return $this->_Oli->deleteLinesMySQL($this->requestsTable, $where);
		else 
			return false;
	}
	
	/** Delete Full Account */
	public function deleteFullAccount($username) {
		$this->deleteAccountInfos('ACCOUNTS', array('username' => $username));
		$this->deleteAccountInfos('INFOS', array('username' => $username));
		$this->deleteAccountInfos('SESSIONS', array('username' => $username));
		$this->deleteAccountInfos('REQUESTS', array('username' => $username));
		return true;
	}
	
	/** ----------------------- */
	/**  Crypt (Hash) Password  */
	/** ----------------------- */
	
	/** Crypt Password */
	public function cryptPassword($password) {
		$options = [];
		if(!empty($this->hashSalt))
			$options['salt'] = $this->hashSalt;
		else if(!empty($this->hashCost))
			$options['cost'] = $this->hashCost;
		
		return password_hash($password, $this->hashAlgorithm, $options);
	}
}

}